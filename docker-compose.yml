#
# docker-compose.yml
# Bring up Main Frontend (Vite), Admin Frontend (CRA), Backend (Express + MySQL), MySQL, and NGINX
#

# (Remove the obsolete “version:” field entirely)

services:
  # ── Main Frontend (Vite + React) ────────────────────────────────────────────────────────
  main-frontend:
    build:
      context: ./Cosylab                   # ← “Cosylab/” is your main‐frontend folder
      dockerfile: Dockerfile
    container_name: main-frontend
    ports:
      - "3000:80"                          # Expose port 3000 → container’s NGINX (port 80)
    networks:
      - app-network
    restart: unless-stopped

  # ── Admin Frontend (CRA) ───────────────────────────────────────────────────────────────
  admin-frontend:
    build:
      context: ./adminportal/frontend      # ← “adminportal/frontend/” is your CRA folder
      dockerfile: Dockerfile
    container_name: admin-frontend
    ports:
      - "3001:80"                          # Expose port 3001 → container’s NGINX (port 80)
    networks:
      - app-network
    restart: unless-stopped

  # ── Backend (Express) ─────────────────────────────────────────────────────────────────
  backend:
    build:
      context: ./adminportal/Backend       # ← “adminportal/Backend/” is your Express folder
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - ./adminportal/Backend/assets/imp.env
    depends_on:
      - mysql
    networks:
      - app-network
    ports:
      - "3005:3005"                        # Expose port 3005 → container’s Express app
    restart: unless-stopped

  # ── MySQL ────────────────────────────────────────────────────────────────────────────────
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "AK1465aman"
      MYSQL_DATABASE: Admin_Portal
      MYSQL_USER: amankumar
      MYSQL_PASSWORD: "AK1465aman"
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql_dump_file.sql:/docker-entrypoint-initdb.d/mysql_dump_file.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ── NGINX (Reverse Proxy if Needed) ───────────────────────────────────────────────────
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - main-frontend
      - admin-frontend
      - backend
    ports:
      - "80:80"                            # Expose port 80 → container’s NGINX
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
